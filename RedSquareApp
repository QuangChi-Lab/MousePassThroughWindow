using OpenTK.Windowing.Common;
using OpenTK.Windowing.Desktop;
using OpenTK.Graphics.OpenGL;
using OpenTK.Mathematics;
using System.Diagnostics;
using System.Runtime.InteropServices;
using OpenTK.Windowing.GraphicsLibraryFramework;

public class RedSquareApp : GameWindow, IDisposable
{
    private int _shaderProgram;

    public RedSquareApp(GameWindowSettings gameWindowSettings, NativeWindowSettings nativeWindowSettings)
        : base(gameWindowSettings, nativeWindowSettings) { }

    protected override void OnLoad()
    {
        base.OnLoad();

        // Enable blending for transparency
        GL.Enable(EnableCap.Blend);
        GL.BlendFunc(BlendingFactor.SrcAlpha, BlendingFactor.OneMinusSrcAlpha);
        GL.ClearColor(0f, 0f, 0f, 0.3f); // Transparent background color
    }

    protected override void OnRenderFrame(FrameEventArgs e)
    {
        base.OnRenderFrame(e);

        Console.WriteLine(GLFW.GetVersionString());
        GL.UseProgram(_shaderProgram);
        GL.Clear(ClearBufferMask.ColorBufferBit);
        Context.SwapBuffers();
    }

    protected override void OnUnload()
    {
        base.OnUnload();
    }

    public static void Main()
    {
        // Initialize GLFW and set the mouse passthrough hint

        var gameSettings = GameWindowSettings.Default;
        var nativeSettings = new NativeWindowSettings
        {
            ClientSize = new Vector2i(800, 600),
            Title = "OpenTK Red Square",
            TransparentFramebuffer = true,
            WindowBorder = WindowBorder.Resizable,

        };

        GLFW.Init();
        GLFW.WindowHint(WindowHintBool.Decorated, false);
        GLFW.WindowHint(WindowHintBool.MousePassthrough, true);

        using (var window = new RedSquareApp(gameSettings, nativeSettings))
        {
            window.Run();
        }

        GLFW.Terminate(); // Clean up GLFW after the window is closed
    }
}
